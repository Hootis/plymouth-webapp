<?php

require_once('PSUTools.class.php');

/**
 * A class of functions related to the undergraduate applicant portal
 */
class ugApplicants
{
	/**
	 * Return a list of applicants who were missing email addresses in the applicant tables, as logged in myplymouth.app_missing_email.
	 * @return array
	 */
	public static function appsMissingEmail( $count = false )
	{
		$what = $count ? "COUNT(*)" : "*";
		$sql = "SELECT $what FROM app_missing_email WHERE resolved = 0";

		if( $count ) {
			return (int)PSU::db('myplymouth')->GetOne( $sql );
		}

		$results = PSU::db('myplymouth')->GetAll( $sql );
		
		return $results;
	}//end appsMissingEmail

	/**
	 * Mark an app_missing_email record as resolved.
	 */
	public static function app_missing_email_resolved( $pidm ) {
		$sql = "UPDATE app_missing_email SET resolved = 1 WHERE pidm = ?";
		$args = array($pidm);

		PSU::db('myplymouth')->Execute($sql, $args);
	}//end app_missing_email_resolved

	/**
	 * Get a specific applicant.
	 *
	 * @param int $pidm the pidm to get deets for
	 * @return array
	 */
	function getApplicant( $pidm )
	{
		if( !isset($GLOBALS['BannerGeneral']) ){
			require_once('BannerGeneral.class.php');
			$GLOBALS['BannerGeneral'] = new BannerGeneral( PSU::db('banner') );
		}

		$return = array();

		$return['email'] = self::getApplicantEmail( $pidm );
		$return['name_first'] = ucwords( PSU::get('idmobject')->getName( $pidm , 'f'));
		$return['username'] = PSU::get('idmobject')->getIdentifier( $pidm,'pid','login_name' );
		$return['ldap_user'] = PSU::get('idmobject')->getIdentifier( $pidm,'pid','username' );
		if( preg_match( '/^app\./i', $return['username'] )){
			$return['username'] = preg_replace( '/^app\./i', '', $return['username'] );
			$return['password'] = $GLOBALS['BannerGeneral']->getPin( $pidm );
		}
		$return['psuid'] = PSU::get('idmobject')->getIdentifier( $pidm , 'pidm', 'id' );
		$return['pidm'] = $pidm;

		$v_ug_app = PSU::db('banner')->GetRow( 'SELECT * FROM v_ug_app WHERE pidm = :pidm', compact('pidm') );
		$return['term_code_entry'] = $v_ug_app['term_code_entry'];
		$return['apdc_code'] = $v_ug_app['apdc_code'];

		return( $return );
	}//end getApplicant

	/**
	 * Return email address(es) for an applicant.
	 *
	 * @param $pidm \b int the pidm to get deets for
	 * @param $all \b bool false (default) to return the preferred email, true to get preferred and rcrapp4_email_address
	 * @return array
	 */
	public static function getApplicantEmail( $pidm, $all = FALSE )
	{
		if( !isset($GLOBALS['BannerStudent']) ){
			require_once('BannerStudent.class.php');
			$GLOBALS['BannerStudent'] = new BannerStudent( PSU::db('banner') );
		}

		$app = array();
		$app['pe'] = $GLOBALS['BannerStudent']->getEmail( $pidm , 'PE',"goremal_preferred_ind='Y'");
		$app['pe'] = $app['pe'][0]['r_email_address'];
		if($app['pe'])
		{
			$app['pe'] = strtolower($app['pe']);
		}
		else
		{
			$app['pe'] = null;
		}

		$sql="SELECT rcrapp4_email_address FROM rcrapp1,rcrapp4
			   WHERE rcrapp1_pidm = rcrapp4_pidm
				 AND rcrapp1_aidy_code = rcrapp4_aidy_code
				 AND rcrapp1_infc_code = rcrapp4_infc_code
				 AND rcrapp1_seq_no = rcrapp4_seq_no
				 AND rcrapp1_curr_rec_ind = 'Y'
				 AND rcrapp4_infc_code = 'EDE'
				 AND rcrapp1_pidm = $pidm
				 AND rcrapp1_aidy_code='0809'
		";

		$app['rcrapp_email'] = ( PSU::db('banner')->GetOne( $sql ));
		if($app['rcrapp_email'])
		{
			$app['rcrapp_email'] = strtolower($app['rcrapp_email']);
		}

		$app['email'] = array();

		if($app['pe'])
		{
			$app['email'][$app['pe']] = true;
		}//end if

		if($app['rcrapp_email'])
		{
			$app['email'][$app['rcrapp_email']] = true;;
		}//end if

		if( $all )
			return( array_keys( $app['email'] ));
		else
			return( $app['pe'] );
	}//end getApplicantEmail

	/**
	 * Wrap a simple SQL statement with a LIMIT clause and/or random ordering
	 *
	 * @todo The SQL generated by this function is god-awful slow due to the way Oracle treats the "WHERE rownum <=" fragment.
	 *
	 * @param $sql \b string the sql statement. must include a WHERE clause.
	 * @param $limit \b int number of rows to limit result set to
	 * @param $random \b bool true for randomized results
	 */
	function wrapSqlRandomLimit( $sql, $limit, $random )
	{
		// setup limit
		$limit = abs( (int) $limit );

		if( $limit ) {
			$limit = "AND rownum <= $limit";
		} else {
			$limit = '';
		}

		// setup random
		if( $random ) {
			$random = "ORDER BY dbms_random.value()";
		} else {
			$random = '';
		}

		if( $limit && $random ) {
			return "SELECT * FROM ( $sql $random ) WHERE 1=1 $limit";
		} elseif( $random ) {
			return "$sql $random";
		} elseif( $limit ) {
			return "$sql $limit";
		}

		return $sql;
	}//end wrapSqlRandomLimit

	/**
	 * Return a specified population.
	 *
	 * @param $which \b string the name of the selector
	 * @param $limit \b int the number of records to return
	 * @param $random \b bool whether or not to return a random subset of users
	 * @return array pidms or aidms or something
	 */
	function getPopulation( $which, $limit = false, $random = false )
	{
		switch( $which )
		{
			case 'app_chkl_zack':
				// No applicant for 201010 or 201030 will have an AA_ACKNOWLEDGE, so they
				// will always show up in this if they have a ZACK record
				$sql = "SELECT pidm, ROWNUM
					FROM v_ug_app_chkl_zack
					WHERE not exists
					(
						SELECT 1
						FROM gurmail
						WHERE gurmail_pidm = pidm
						AND gurmail_letr_code = 'AA_ACKNOWLEDGE'
						AND gurmail_term_code = term_code_entry
					)";
				$sql = self::wrapSqlRandomLimit( $sql, $limit, $random );

				if( $results = PSU::db('banner')->GetCol( $sql ))
					return( $results );
				else
					return( false );

			case 'unsent_myp_invite':
				$sql = "SELECT pidm, term_code_entry FROM v_ug_app_unsent_myp_invite WHERE 1=1";
				if( $random ) {
					$sql .= " ORDER BY dbms_random.value()";
				}
				if( $limit === false ) {
					$limit = -1;
				}
				if( $result = PSU::db('banner')->SelectLimit($sql, $limit) )
					return $result->GetAll();
				else
					return false;

			case 'not_acknowledged':
				$sql = "SELECT * FROM v_ug_app_not_acknowledged WHERE 1=1";
				$sql = self::wrapSqlRandomLimit( $sql, $limit, $random );
				if( $result = PSU::db('banner')->GetAll($sql) )
					return $result;
				else
					return false;

/*
			case 'app_accepted':
				$sql = "SELECT pidm_key AS pidm, ROWNUM
					FROM as_admissions_applicant
					WHERE STYP_CODE <> 'R'
					AND ( ADMT_CODE IN ('ST', 'IN', 'NC') OR ADMT_CODE IS NULL )
					AND APDC_CODE1 IN ('AA', 'AD')
					AND EXISTS
					(
						SELECT 1
						FROM v_ug_app
						WHERE v_ug_app.pidm = pidm
					)
					$limit";

				if( $results = PSU::db('banner')->GetCol( $sql ))
					return( $results );
				else
					return( FALSE );
*/

			case 'app_admitted':
				$sql = "SELECT pidm_key AS pidm, ROWNUM
					FROM as_admissions_applicant
					WHERE STYP_CODE <> 'R'
					AND ( ADMT_CODE IN ('ST', 'IN', 'NC') OR ADMT_CODE IS NULL )
					AND APDC_CODE1 IN ('AA', 'AD', 'PD', 'PW')
					AND term_code_key = '201010'
					$limit";

				if( $results = PSU::db('banner')->GetCol( $sql ))
					return( $results );
				else
					return( FALSE );

			case 'app_paid':
				$sql = "SELECT pidm_key AS pidm, ROWNUM
					FROM as_admissions_applicant
					WHERE STYP_CODE <> 'R'
					AND ( ADMT_CODE IN ('ST', 'IN', 'NC') OR ADMT_CODE IS NULL )
					AND APDC_CODE1 IN ('PD', 'PW')
					AND term_code_key = '201010'
					$limit";

				if( $results = PSU::db('banner')->GetCol( $sql ))
					return( $results );
				else
					return( FALSE );

			case 'app_accepted_uncommitted':
				$sql = "SELECT pidm_key AS pidm, ROWNUM
					FROM as_admissions_applicant
					WHERE STYP_CODE <> 'R'
					AND APDC_DECISION_DATE1 < to_date('27-APR-2009', 'DD-MON-YYYY')
					AND ( ADMT_CODE IN ('ST', 'IN', 'NC') OR ADMT_CODE IS NULL )
					AND APDC_CODE1 IN ('AA', 'AD')
					AND term_code_key = '201010'
					$limit";

				if( $results = PSU::db('banner')->GetCol( $sql ))
					return( $results );
				else
					return( FALSE );

			case 'app_incomplete':
				$sql = "SELECT pidm_key AS pidm, ROWNUM
					FROM as_admissions_applicant
					WHERE STYP_CODE <> 'R'
					AND ( ADMT_CODE IN ('ST', 'IN', 'NC') OR ADMT_CODE IS NULL )
					AND ( APDC_CODE1 IN ('ND', 'RA', 'RD') OR APDC_CODE1 IS NULL )
					AND term_code_key = '201010'
					$limit";

				if( $results = PSU::db('banner')->GetCol( $sql ))
					return( $results );
				else
					return( FALSE );

			case 'apps_tickle':
				$sql = "SELECT g1.gorirol_pidm
					FROM gorirol g1
					WHERE g1.gorirol_role='UG_APP'
					AND g1.gorirol_role_group='INTCOMP'
					AND not exists
					(
						SELECT 1
						FROM gurmail
						WHERE gurmail_pidm=g1.gorirol_pidm
						AND gurmail_letr_code='AA_ACKNOWLEDGE'
						AND gurmail_term_code='$term'
					)
					AND not exists
					(
						SELECT 1
						FROM gorirol g2
						WHERE g2.gorirol_pidm=g1.gorirol_pidm
						AND g2.gorirol_role='STUDENT_ACCOUNT_ACTIVE'
						AND g2.gorirol_role_group='INTCOMP'
					)
					$limit";

				if( $results = PSU::db('banner')->GetAll( $sql ))
					return( $results );
				else
					return( FALSE );
		}

		return( FALSE );
	}//end getPopulation

	/**
	 * Provision an applicant record from self::getApplicant into WordPress.
	 */
	function provisionWordPress( $applicant ) {
		if( !function_exists( 'sl_provision_applicant') )
		{
			die('Cannot provision a WordPress account: WordPress or login-hacks is not available.');
		}

		if( ! filter_var( $applicant['email'], FILTER_VALIDATE_EMAIL ) ) {
			return new WP_Error( 'malformed-email', 'A malformed email address has been provided for this user.' );
		}

		$sanitizer = new PSU_Sanitizer_Email;
		$applicant['email'] = $sanitizer->clean( $applicant['email'] );

		$result = sl_provision_applicant( $applicant['pidm'], $applicant['email'], $applicant['term_code_entry'] );

		if( false === $result )
		{
			return false;
		}

		if( $result instanceof WP_Error )
		{
			return $result;
		}

		if( 'active-user' === $result ) {
			return true;
		}

		// $result was a user id number
		$user_data = get_userdata( $result );
		ac_applicant_initial_pw( $user_data );

		return true;
	}//end provisionWordPress

	/**
	 * setEmailed
	 *
	 * @param int $who the pidm of the person emailed
	 * @param string $what the name of the email
	 * @return true on success
	 */
	function setEmailed( $pidm, $letr_code, $term_code )
	{

		$pidm = abs( (int) $pidm );
		$letr_code = preg_replace( '/[^a-z0-9_]/i', '_', $letr_code );
		$term_code = abs( (int) $term_code );

		if( ( $pidm > 0 ) && ( !empty( $letr_code )) && $term_code )
		{
			$sql = "INSERT INTO gurmail
				( gurmail_pidm, gurmail_system_ind, gurmail_term_code, gurmail_letr_code, gurmail_date_init, gurmail_date_printed, gurmail_module_code, gurmail_user, gurmail_init_code, gurmail_activity_date )
				VALUES ( $pidm, 'S', $term_code, '$letr_code', SYSDATE, SYSDATE, 'A', 'psu', 'PSU', SYSDATE )
			";

			PSU::db('banner')->Execute( $sql );
		}
		else
			return( FALSE );

	}//end setEmailed
}//end ugApplicants
